package com.mapr.distiller.server.coordinators;

import java.util.concurrent.ConcurrentHashMap;

import com.mapr.distiller.server.processors.IostatStderrRecordProcessor;
import com.mapr.distiller.server.processors.IostatStdoutRecordProcessor;
import com.mapr.distiller.server.queues.RecordQueue;
import com.mapr.distiller.server.queues.SingleConsumerRecordQueue;
import com.mapr.distiller.server.readers.WholeLineRecordReader;

public class IostatProcessRecordProducer extends Thread {

	ExternalProcessRecordProducer externalProcessRecordProducer = null;
	private WholeLineRecordReader iostatStdoutReader, iostatStderrReader;
	private IostatStdoutRecordProcessor recordProcessor;
	private IostatStderrRecordProcessor errorProcessor;
	private SingleConsumerRecordQueue outputRecordQueue;
	private SingleConsumerRecordQueue errorRecordQueue;
	private String id = "IostatMonitor";
	private ConcurrentHashMap<String, RecordQueue> nameToRecordQueueMap;
	private boolean shouldStop = false;

	public IostatProcessRecordProducer(
			ConcurrentHashMap<String, RecordQueue> nameToRecordQueueMap) {
		this.nameToRecordQueueMap = nameToRecordQueueMap;

		// Create RecordReader's attached to stdout/stderr from iostat process
		this.iostatStdoutReader = new WholeLineRecordReader(id + ":O");
		this.iostatStderrReader = new WholeLineRecordReader(id + ":E");

		// Create RecordProcessor's to process records from RecordReader's
		this.recordProcessor = new IostatStdoutRecordProcessor();
		this.errorProcessor = new IostatStderrRecordProcessor();

		// Create RecordQueue's to hold records generated by RecordProcessor's
		this.outputRecordQueue = new SingleConsumerRecordQueue(id + ":O", 2048); // First
																					// level
																					// iostat
																					// output
																					// records
																					// should
																					// be
																					// processed
																					// and
																					// removed
																					// from
																					// output
																					// queue
																					// quickly,
																					// use
																					// a
																					// low
																					// limit
																					// to
																					// find
																					// problems
																					// quickly.
		this.errorRecordQueue = null; // We aren't going to process/save any
										// records based on stderr stream, any
										// output to stderr results in reinit()

		externalProcessRecordProducer = new ExternalProcessRecordProducer(
				this.id, IostatStdoutRecordProcessor.command,
				this.iostatStdoutReader, this.iostatStderrReader,
				this.recordProcessor, this.errorProcessor,
				this.outputRecordQueue, this.errorRecordQueue);

	}

	public void run() {
		try {
			if (nameToRecordQueueMap.putIfAbsent("iostatProcessRecords",
					outputRecordQueue) != null) {
				System.err
						.println("ERROR: "
								+ id
								+ ": nameToRecordQueueMap already contains iostatProcessRecords but not from this instance.");
				throw new Exception();
			}
		} catch (Exception e) {
			System.err
					.println("ERROR: "
							+ id
							+ ": Caught exception while trying to register output RecordQueue in nameToRecordQueueMap, this "
							+ this + " will exit.");
			e.printStackTrace();
		} finally {
			if (!outputRecordQueue.registerProducer("IostatProcess")) {
				System.err
						.println("Failed to register producer iostatProcess with iostatProcessRecords");
				System.exit(1);
			}
			externalProcessRecordProducer.startChildProcesses(this);
			while (!shouldStop) {
				if (!externalProcessRecordProducer.areAllChildThreadsRunning()) {
					reinit();
				}
				try {
					Thread.sleep(1000);
				} catch (Exception e) {
				}
				;
			}
		}
		outputRecordQueue.unregisterProducer("IostatProcess");
		externalProcessRecordProducer.stopChildProcess(this);
	}

	public void exitRequest() {
		shouldStop = true;
	}

	public void reinit() {
		System.err.println(id + ": Received request to reinit...");
		this.iostatStdoutReader = new WholeLineRecordReader(id + ":O");
		this.iostatStderrReader = new WholeLineRecordReader(id + ":E");
		this.recordProcessor = new IostatStdoutRecordProcessor();
		this.errorProcessor = new IostatStderrRecordProcessor();
		externalProcessRecordProducer = new ExternalProcessRecordProducer(
				this.id, IostatStdoutRecordProcessor.command,
				this.iostatStdoutReader, this.iostatStderrReader,
				this.recordProcessor, this.errorProcessor,
				this.outputRecordQueue, this.errorRecordQueue);

	}
}
