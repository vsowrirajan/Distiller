package com.mapr.distiller.server.recordtypes;

import com.mapr.distiller.server.utils.Constants;

public class MapRDBCoordinatorMetaRecord extends Record {
	private static final long serialVersionUID = Constants.SVUID_MAPRDB_COORDINATOR_META_RECORD;
	/**
	 * Prior to instantiating a MetricAction that persists data to MapRDB, a Coordinator instance MetricActions that persist Records to MapRDB will 
	 * The row key used to insert these Records to MapRDB should be equal to:
	 * <sourceHostname>/t<timestamp>/<pid>/p<previousTimestamp>
	 * And:
	 * <sourceHostname>/p<previousTimestamp>/<pid>/t<timestamp>
	 * 
	 * MapRDBMetricMetaRecords generated by MetricActions contain a value "coordinatorId" that equals:
	 * <sourceHostname>/<timestamp>/<pid>
	 */
	//String sourceHostname;		//Hostname of machine that performed the puts
	//int pid;						//ID of process that performed the puts
	boolean workDirEnabled;			//Whether or not the MapRDBPersistor will write Records to it's work dir on it's OS partition when the asyncPutTimeout is hit
	String workDirPath;				//Path on host's local FS where timed out Puts are stored while waiting to be replayed
	int workDirBatchSize;			//The max number of Records that will be written to a single file in the work dir
	int asyncPutTimeout;			//Time in milliseconds after the submission of a Put to the async HBaseClient after which, if no Callback method was called, the Put will be eligible to discard or buffer to the work dir
}
