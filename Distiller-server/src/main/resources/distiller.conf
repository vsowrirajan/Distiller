distiller {
    #
    # Enable collection of raw metrics from ProcRecordProducer and MfsGutsRecordProducer
    #
    rawSystemCpu-1sI {
        metric.name = "RawSystemCpu-1sI"
        metric.description = "Produces raw SystemCpuRecord objects based on samples of CPU counters taken from /proc/stat every 1 second"
        proc.record.producer.metric.name = SystemCpu
        periodicity.ms = 1000
        record.type = ProcRecordProducer
	output.queue.name = "RawSystemCpu-1sI"
        output.queue.capacity.records = 600
        output.queue.capacity.seconds = 600
	metric.enabled=true
    }
    rawSystemMemory-1sI {
        metric.name = "RawSystemMemory-1sI"
        metric.description = "Produces raw SystemMemoryRecord objects based on samples of memory counters taken from /proc/meminfo and /proc/vmstat every 1 second"
        proc.record.producer.metric.name = SystemMemory
        periodicity.ms = 1000
        record.type = ProcRecordProducer
	output.queue.name = "RawSystemMemory-1sI"
        output.queue.capacity.records = 600
        output.queue.capacity.seconds = 600
	metric.enabled=true
    }
    rawDiskstat-1sI {
        metric.name = "RawDiskstat-1sI"
        metric.description = "Produces raw DiskstatRecord objects based on samples of disk counters taken from /proc/diskstats every 1 second"
        proc.record.producer.metric.name = Diskstat
        periodicity.ms = 1000
        record.type = ProcRecordProducer
	output.queue.name = "RawDiskstat-1sI"
        output.queue.capacity.records = 600
        output.queue.capacity.seconds = 600
	metric.enabled=true
    }
    rawNetworkInterface-1sI {
        metric.name = "RawNetworkInterface-1sI"
        metric.description = "Produces raw NetworkInterfaceRecord objects based on samples of NIC counters taken from /sys/class/net/[ifname] every 1 second"
        proc.record.producer.metric.name = NetworkInterface
        periodicity.ms = 1000
        record.type = ProcRecordProducer
	output.queue.name = "RawNetworkInterface-1sI"
        output.queue.capacity.records = 600
        output.queue.capacity.seconds = 600
	metric.enabled=true
    }
    rawProcessResource-60sI {
        metric.name = "RawProcessResource-60sI"
        metric.description = "Produces raw ProcessResourceRecord objects based on samples of per-process counters taken from /proc/[pid]/stat and /proc/[pid]/io every 60 seconds"
        proc.record.producer.metric.name = ProcessResource
        periodicity.ms = 60000
        record.type = ProcRecordProducer
	output.queue.name = "RawProcessResource-60sI"
        output.queue.capacity.records = 65536
        output.queue.capacity.seconds = 300
 	metric.enabled=true
   }
    rawSlimProcessResource-1sI {
        metric.name = "RawSlimProcessResource-1sI"
        metric.description = "Produces raw SlimProcessResourceRecord objects based on samples of per-process counters taken from /proc/[pid]/stat and /proc/[pid]/io every 1 second"
        proc.record.producer.metric.name = SlimProcessResource
        periodicity.ms = 1000
        record.type = ProcRecordProducer
	output.queue.name = "RawSlimProcessResource-1sI"
        output.queue.capacity.records = 65536
        output.queue.capacity.seconds = 10
	metric.enabled=true
    }
    rawThreadResource-60sI {
        metric.name = "RawThreadResource-60sI"
        metric.description = "Produces raw ThreadResourceRecord objects based on samples of per-thread counters taken from /proc/[pid]/task/[tid]/stat and /proc/[pid]/task/[tid]/io every 60 seconds"
        proc.record.producer.metric.name = ThreadResource
        periodicity.ms = 60000
        record.type = ProcRecordProducer
	output.queue.name = "RawThreadResource-60sI"
        output.queue.capacity.records = 65536
        output.queue.capacity.seconds = 300
	metric.enabled=true
    }
    rawSlimThreadResource-1sI {
        metric.name = "RawSlimThreadResource-1sI"
        metric.description = "Produces raw SlimThreadResourceRecord objects based on samples of per-thread counters taken from /proc/[pid]/task/[tid]/stat and /proc/[pid]/task/[tid]/io every 1 second"
        proc.record.producer.metric.name = SlimThreadResource
        periodicity.ms = 1000
	record.type = ProcRecordProducer
        output.queue.name = "RawSlimThreadResource-1sI"
        output.queue.capacity.records = 65536
        output.queue.capacity.seconds = 10
	metric.enabled=true
    }
    rawTcpConnectionStat-10sI {
        metric.name = "RawTcpConnectionStat-10sI"
        metric.description = "Produces raw TcpConnectionStatRecord objects based on established TCP connections taken from /proc/net/tcp and /proc/[pid]/fd every 10 seconds"
        proc.record.producer.metric.name = TcpConnectionStat
        periodicity.ms = 10000
        record.type = ProcRecordProducer
	output.queue.name = "RawTcpConnectionStat-10sI"
        output.queue.capacity.records = 600
        output.queue.capacity.seconds = 600
 	metric.enabled=true
    }
    rawMfsGuts-1sI {
	metric.name = "RawMfsGuts-1sI"
	metric.description = "Samples of /opt/mapr/bin/guts output for MFS every 1 second"
        record.type = MfsGutsRecordProducer
	output.queue.name = "RawMfsGuts-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	raw.producer.metrics.enabled = false
	metric.enabled=true
    }

    #
    # Distill SystemMemoryRecords for 1 second periods that show any of the following conditions:
    # 1. >95% physical memory usage 
    # 2. >0 pages swapped in or out
    # 3. >0 instances of alloc stall
    #
    diffSystemMemory-1s {
	metric.name = "DiffSystemMemory-1sI"
	metric.description = "Produces differential SystemMemoryRecord objects from raw SystemMemoryRecord objects at 1 second interval"
	input.queue.name = "RawSystemMemory-1sI"
	record.type = SystemMemory
	output.queue.name = "DiffSystemMemory-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 1000
    }
    highSystemMemory-1s {
	metric.name = "HighSystemMemory-1sI-95%"
	metric.description = "Produces differential SystemMemoryRecord objects where RAM utilization is > 95% at 1 second interval"
	input.queue.name = "DiffSystemMemory-1sI"
	record.type = SystemMemory
	output.queue.name = "SystemMemoryEvents-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 4
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = isBelow
	threshold.key = "%free"
	threshold.value = 0.05
	metric.enabled=true
	periodicity.ms = 1000
    }
    pagesSwappedIn-1s {
	metric.name = "pagesSwappedIn-1sI"
	metric.description = "Produces differential SystemMemoryRecord objects where pswpin is > 0"
	input.queue.name = "DiffSystemMemory-1sI"
	record.type = SystemMemory
	output.queue.name = "SystemMemoryEvents-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 4
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = isNotEqual
	threshold.key = "pswpin"
	threshold.value = 0
	metric.enabled=true
	periodicity.ms = 1000
    }
    pagesSwappedOut-1s {
	metric.name = "pagesSwappedOut-1sI"
	metric.description = "Produces differential SystemMemoryRecord objects where pswpout is > 0"
	input.queue.name = "DiffSystemMemory-1sI"
	record.type = SystemMemory
	output.queue.name = "SystemMemoryEvents-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 4
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = isNotEqual
	threshold.key = "pswpout"
	threshold.value = 0
	periodicity.ms = 1000
	metric.enabled=true
    }
    allocstall-1s {
	metric.name = "allocstall-1sI"
	metric.description = "Produces differential SystemMemoryRecord objects where allocstall is > 0"
	input.queue.name = "DiffSystemMemory-1sI"
	record.type = SystemMemory
	output.queue.name = "SystemMemoryEvents-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 4
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = isNotEqual
	threshold.key = "allocstall"
	threshold.value = 0
	periodicity.ms = 1000
	metric.enabled=true
    }

    #
    # Distill SystemCpuRecords for 1 second periods that show system-wide CPU usage >95%
    #
    diffSystemCpu-1sI {
	metric.name = "DiffSystemCpu-1sI"
	metric.description = "Produces differential SystemCpuRecord objects from raw SystemCpuRecord objects at 1 second interval"
	input.queue.name = "RawSystemCpu-1sI"
	record.type = SystemCpu
	output.queue.name = "DiffSystemCpu-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemCpuRecordProcessor
	input.record.processor.method = merge 
	periodicity.ms = 1000
 	metric.enabled=true
    }
    highSystemCpu-1sI {
	metric.name = "HighSystemCpu-1sI-95%"
	metric.description = "Produces differential SystemCpuRecord objects where CPU utilization is > 95% at 1 second interval"
	input.queue.name = "DiffSystemCpu-1sI"
	record.type = SystemCpu
	output.queue.name = "SystemCpuEvents-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemCpuRecordProcessor
	input.record.processor.method = isBelow
	threshold.key = "%idle"
	threshold.value = 0.05
	metric.enabled=true
	periodicity.ms = 1000
    }

    #
    # Distill DiskstatRecords for 1 second periods that show device utilization at >95%
    #
    diffDiskstat-1s {
	metric.name = "DiffDiskstat-1sI"
	metric.description = "Produces differential DiskstatRecord objects from raw DiskstatRecord objects at 1 second interval"
	input.queue.name = "RawDiskstat-1sI"
	record.type = Diskstat
	output.queue.name = "DiffDiskstat-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "device_name"
	input.record.processor.name = DiskstatRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 1000
    }
    highDeviceUtilization-1sI {
	metric.name = "HighDeviceUtilization-1sI-95%"
	metric.description = "Produces differential DiskstatRecord objects where device utilization is > 95% at 1 second interval"
	input.queue.name = "DiffDiskstat-1sI"
	record.type = Diskstat
	output.queue.name = "DiskEvents-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = DiskstatRecordProcessor
	input.record.processor.method = isAbove
	threshold.key = "utilizationPct"
	threshold.value = 0.95
	metric.enabled=true
	periodicity.ms = 1000
    }

    #
    # Distill NetworkInterfaceRecords for 1 second periods that show any of the following conditions:
    # 1. >90% RX or TX utilization 
    # 2. half duplex
    # 3. no carrier
    # 4. speed is set to less than 1000Mbps
    # 5. TX queue length is < 1000
    # 6. Any number of collisions, drops or errors
    #
    diffNetworkInterface-1sI {
	metric.name = "DiffNetworkInterface-1sI"
	metric.description = "Produces differential NetworkInterfaceRecord objects from raw NetworkInterfaceRecord objects at 1 second interval"
	input.queue.name = "RawNetworkInterface-1sI"
	record.type = NetworkInterface
	output.queue.name = "DiffNetworkInterface-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "name"
	input.record.processor.name = NetworkInterfaceRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 1000
    }
    highNetworkInterfaceRXUtilization-1sI {
	metric.name = "HighNetworkInterfaceRXUtilization-1sI-90%"
	metric.description = "Produces differential NetworkInterfaceRecord objects where RX utilization is > 90% at 1 second interval"
	input.queue.name = "DiffNetworkInterface-1sI"
	record.type = NetworkInterface
	output.queue.name = "NetworkInterfaceEvents-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 3
	input.record.selector = sequential
	input.record.processor.name = NetworkInterfaceRecordProcessor
	input.record.processor.method = isAbove
	threshold.key = "rxUtilizationPct"
	threshold.value = 0.9
	metric.enabled=true
	periodicity.ms = 1000
    }
    highNetworkInterfaceTXUtilization-1sI {
	metric.name = "HighNetworkInterfaceTXUtilization-1sI-90%"
	metric.description = "Produces differential NetworkInterfaceRecord objects where TX utilization is > 90% at 1 second interval"
	input.queue.name = "DiffNetworkInterface-1sI"
	record.type = NetworkInterface
	output.queue.name = "NetworkInterfaceEvents-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 3
	input.record.selector = sequential
	input.record.processor.name = NetworkInterfaceRecordProcessor
	input.record.processor.method = isAbove
	threshold.key = "txUtilizationPct"
	threshold.value = 0.9
	metric.enabled=true
	periodicity.ms = 1000
    }
    NetworkInterfaceHasProblems-1sI {
	metric.name = "NetworkInterfaceHasProblems-1sI-90%"
	metric.description = "Produces differential NetworkInterfaceRecord objects where any of a variety of problems are found on the interface"
	input.queue.name = "DiffNetworkInterface-1sI"
	record.type = NetworkInterface
	output.queue.name = "NetworkInterfaceEvents-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 3
	input.record.selector = sequential
	input.record.processor.name = NetworkInterfaceRecordProcessor
	input.record.processor.method = isEqual
	threshold.key = "hasProblems"
	threshold.value = true
	metric.enabled=true
	periodicity.ms = 1000
    }

    #
    # Generate differential ProcessResourceRecords
    # These records are generally only of interest when a bottleneck is identified at a system level and usage of that resource needs to be viewed broken down by process
    #
    diffProcessResource-60sI {
	metric.name = "DiffProcessResource-60sI"
	metric.description = "Produces differential ProcessResourceRecord objects from raw ProcessResourceRecord objects at 60 second interval"
	input.queue.name = "RawProcessResource-60sI"
	record.type = ProcessResource
	output.queue.name = "DiffProcessResource-60sI"
	output.queue.capacity.records = 65536
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "pid"
	input.record.processor.name = ProcessResourceRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 10000
    }

    #
    # Generate differential SlimProcessResourceRecords
    # These records are generally only of interest when a bottleneck is identified at a system level and usage of that resource needs to be viewed broken down by process
    #
    diffSlimProcessResource-1sI {
	metric.name = "DiffSlimProcessResource-1sI"
	metric.description = "Produces differential SlimProcessResourceRecord objects from raw SlimProcessResourceRecord objects at 1 second interval"
	input.queue.name = "RawSlimProcessResource-1sI"
	record.type = SlimProcessResource
	output.queue.name = "DiffSlimProcessResource-1sI"
	output.queue.capacity.records = 65536
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "pid"
	input.record.processor.name = SlimProcessResourceRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 1000
    }

    #
    # Distill ThreadResourceRecords for 1 second periods that show less than 10% idle time 
    #
    diffThreadResource-60sI {
	metric.name = "DiffThreadResource-60sI"
	metric.description = "Produces differential ThreadResourceRecord objects from raw ThreadResourceRecord objects at 1 second interval"
	input.queue.name = "RawThreadResource-60sI"
	record.type = ThreadResource
	output.queue.name = "DiffThreadResource-60sI"
	output.queue.capacity.records = 65536
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "pid"
	input.record.processor.name = ThreadResourceRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 3000
    }
    highThreadCpu-10sI {
	metric.name = "HighThreadCpu-10sI-90%"
	metric.description = "Produces differential ThreadResourceRecord objects where CPU utilization is > 90% at 60 second interval"
	input.queue.name = "DiffThreadResource-60sI"
	record.type = ThreadResource
	output.queue.name = "ThreadResourceEvents-60sI"
	output.queue.capacity.records = 4096
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = ThreadResourceRecordProcessor
	input.record.processor.method = isBelow
	threshold.key = "idlePct"
	threshold.value = 0.1
	metric.enabled=true
	periodicity.ms = 10000
    }

    #
    # Distill SlimThreadResourceRecords for 1 second periods that show less than 10% idle time 
    #
    diffSlimThreadResource-1sI {
	metric.name = "DiffSlimThreadResource-1sI"
	metric.description = "Produces differential SlimThreadResourceRecord objects from raw SlimThreadResourceRecord objects at 1 second interval"
	input.queue.name = "RawSlimThreadResource-1sI"
	record.type = SlimThreadResource
	output.queue.name = "DiffSlimThreadResource-1sI"
	output.queue.capacity.records = 65536
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "pid"
	input.record.processor.name = SlimThreadResourceRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 1000
    }
    SlimThreadHighCpu-1sI {
	metric.name = "SlimThreadHighCpu-1sI-90%"
	metric.description = "Produces differential SlimThreadResourceRecord objects where CPU utilization is > 90% at 1 second interval"
	input.queue.name = "DiffSlimThreadResource-1sI"
	record.type = SlimThreadResource
	output.queue.name = "SlimThreadHighCpu-1sI-90%"
	output.queue.capacity.records = 4096
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SlimThreadResourceRecordProcessor
	input.record.processor.method = isBelow
	threshold.key = "idlePct"
	threshold.value = 1
	metric.enabled=true
	periodicity.ms = 1000
    }

    #
    # Distill SlimThreadResourceRecord objects that where MFS threads show >90% CPU utilization at 1 second interval
    # Use related selector to also distill raw MfsGuts records generated within a 10 second window around the high MFS thread CPU utilization
    #
     mfsGutsDuringMfsThreadHighCpu-10sW-1sI {
	metric.name = "MfsGutsDuringMfsThreadHighCpu-10sW-1sI"
	metric.description = "Produces raw MfsGutsRecord objects when a SlimThreadResourceRecord object shows an MFS thread with less than 10% idle time"
	input.queue.name = "SlimThreadHighCpu-1sI-90%"
	record.type = SlimThreadResource
	output.queue.name = "MfsThreadHighCpu-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	related.output.queue.record.capacity = 600
	related.output.queue.second.capacity = 600
	related.output.queue.max.producers = 1
	input.record.selector = sequential
	related.selector.enabled = true
	selector.qualifier.key = "duration"
	selector.qualifier.value = 10000
	selector.related.input.queue.name = "RawMfsGuts-1sI"
	selector.related.output.queue.name = "MfsGutsDuringMfsThreadHighCpu-10sW-1sI"
	selector.related.name = BasicRelatedRecordSelector
	selector.related.method = timeBasedWindow
	input.record.processor.name = SlimThreadResourceRecordProcessor
	input.record.processor.method = isEqual
	threshold.key = "commandName"
	threshold.value = "mfs"
	metric.enabled=true
	periodicity.ms = 1000
    }



    #
    # Generate differential TcpConnectionStatRecords that indicate the length of time a TCP connection was observed to be established.
    # These records are aggregated from 1 second interval raw TcpConnectionStatRecords into records that cover up to 60 second time period.
    #
    diffTcpConnections-60sW-1sI {
	metric.name = "DiffTcpConnections-60s"
	metric.description = "Produces differential TcpConnectionStatRecord objects from raw TcpConnectionStatRecord objects at 1 second interval"
	input.queue.name = "RawTcpConnectionStat-10sI"
	record.type = TcpConnectionStat
	output.queue.name = "DiffTcpConnections-60sW-1sI"
	output.queue.capacity.records = 65536
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	output.queue.type = UpdatingSubscriptionRecordQueue
	input.record.selector = cumulativeWithQualifier
	selector.cumulative.flush.time = 60000
	selector.qualifier.key = "tuple"
	updating.subscription.queue.key = "tuple"
	input.record.processor.name = TcpConnectionStatRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 1000
    }

    #
    # Generate 60 second moving averages of SystemCpu at 1 second interval
    #
    SystemCpu-60sMovingAverage-1sI {
	metric.name = "SystemCpu-60sMovingAverage-1sI"
	metric.description = "Produces SystemCpuRecord objects for 60 second moving average at 1 second interval"
	input.queue.name = "RawSystemCpu-1sI"
	record.type = SystemCpu
	output.queue.name = "SystemCpu-60sMovingAverage-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = time
	input.record.processor.name = SystemCpuRecordProcessor
	input.record.processor.method = merge
	time.selector.min.delta = 60000
	time.selector.max.delta = 80000
	metric.enabled=true
	periodicity.ms = 1000
    }

    #
    # Generate 60 second moving averages of SystemMemory at 1 second interval
    #
    cumulativeSystemMemory-1sI {
	metric.name = "CumulativeSystemMemory-1sI"
	metric.description = "Produces cumulative SystemMemoryRecord objects from differential SystemMemory objects at 1 second interval"
	input.queue.name = "DiffSystemMemory-1sI"
	record.type = SystemMemory
	output.queue.name = "CumulativeSystemMemory-1sI"
	output.queue.capacity.records = 65536
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = cumulative
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 1000
    }
    SystemMemory-6sMovingAverage-1sI {
	metric.name = "SystemMemory-6sMovingAverage-1sI"
	metric.description = "Produces SystemMemoryRecord objects for 6 second moving average at 1 second interval"
	input.queue.name = "CumulativeSystemMemory-1sI"
	record.type = SystemMemory
	output.queue.name = "SystemMemory-6sMovingAverage-1sI"
	output.queue.capacity.records = 600
	output.queue.capacity.seconds = 600
	output.queue.max.producers = 1
	input.record.selector = time
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = merge
	time.selector.min.delta = 6000
	time.selector.max.delta = 8000
	metric.enabled=true
	periodicity.ms = 1000
    }


    #
    # Enable monitoring for raw record producers
    #
#    mfsGutsRecordProducerStats-60s {
#	metric.name = "MfsGutsRecordProducerStats"
#	metric.description = "Internal performance information"
#	record.type = RawRecordProducerStat
#	metric.enabled=true
#	raw.record.producer.name = "MfsGutsRecordProducer"
#	periodicity.ms = 60000
#    }
    procRecordProducerStats-10s {
        metric.name = "ProcRecordProducerStats"
	metric.description = "Internal performance information"
	record.type = RawRecordProducerStat
	raw.record.producer.name = "ProcRecordProducer"
	metric.enabled=true
	periodicity.ms = 10000
    }
}
