distiller {
    #
    # After running PersistRawRecordToLocalFileSystem.conf, this configuration will
    # process those files and in turn produce files containing records showing HW bottlenecks.
    #
    RawSystemCpu-1sI {
	metric.name = "RawSystemCpu-1sI"
	metric.description = "Read all raw SystemCpuRecords from local files in /opt/mapr/distiller/output"
	record.type = "SystemCpu"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "/opt/mapr/distiller/output"
	output.queue.name = "RawSystemCpu-1sI"
	input.queue.type = "LocalFileInputRecordQueue"
	input.record.selector = sequential
	output.queue.capacity.records = 10000
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.processor.name = PassthroughRecordProcessor
	local.file.input.queue.scanner = scanByTimestamp
	local.file.input.queue.start.timestamp = 0
	local.file.input.queue.end.timestamp = -1
	local.file.input.metric.name = "PersistRawSystemCpu-1sI"
    }
    RawSystemMemory-1sI {
	metric.name = "RawSystemMemory-1sI"
	metric.description = "Read all raw SystemMemoryRecords from local files in /opt/mapr/distiller/output"
	record.type = "SystemMemory"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "/opt/mapr/distiller/output"
	output.queue.name = "RawSystemMemory-1sI"
	input.queue.type = "LocalFileInputRecordQueue"
	input.record.selector = sequential
	output.queue.capacity.records = 10000
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.processor.name = PassthroughRecordProcessor
	local.file.input.queue.scanner = scanByTimestamp
	local.file.input.queue.start.timestamp = 0
	local.file.input.queue.end.timestamp = -1
	local.file.input.metric.name = "PersistRawSystemMemory-1sI"
    }
    RawDiskstat-1sI {
	metric.name = "RawDiskstat-1sI"
	metric.description = "Read all raw DiskstatRecords from local files in /opt/mapr/distiller/output"
	record.type = "Diskstat"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "/opt/mapr/distiller/output"
	output.queue.name = "RawDiskstat-1sI"
	input.queue.type = "LocalFileInputRecordQueue"
	input.record.selector = sequential
	output.queue.capacity.records = 32000
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.processor.name = PassthroughRecordProcessor
	local.file.input.queue.scanner = scanByTimestamp
	local.file.input.queue.start.timestamp = 0
	local.file.input.queue.end.timestamp = -1
	local.file.input.metric.name = "PersistRawDiskstat-1sI"
    }
    RawNetworkInterface-1sI {
	metric.name = "RawNetworkInterface-1sI"
	metric.description = "Read all raw NetworkInterfaceRecords from local files in /opt/mapr/distiller/output"
	record.type = "NetworkInterface"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "/opt/mapr/distiller/output"
	output.queue.name = "RawNetworkInterface-1sI"
	input.queue.type = "LocalFileInputRecordQueue"
	input.record.selector = sequential
	output.queue.capacity.records = 10000
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.processor.name = PassthroughRecordProcessor
	local.file.input.queue.scanner = scanByTimestamp
	local.file.input.queue.start.timestamp = 0
	local.file.input.queue.end.timestamp = -1
	local.file.input.metric.name = "PersistRawNetworkInterface-1sI"
    }
    RawLoadAverage-1sI {
	metric.name = "RawLoadAverage-1sI"
	metric.description = "Read all raw LoadAverageRecords from local files in /opt/mapr/distiller/output"
	record.type = "LoadAverage"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "/opt/mapr/distiller/output"
	output.queue.name = "RawLoadAverage-1sI"
	input.queue.type = "LocalFileInputRecordQueue"
	input.record.selector = sequential
	output.queue.capacity.records = 10000
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.processor.name = PassthroughRecordProcessor
	local.file.input.queue.scanner = scanByTimestamp
	local.file.input.queue.start.timestamp = 0
	local.file.input.queue.end.timestamp = -1
	local.file.input.metric.name = "PersistRawLoadAverage-1sI"
    }

    #
    # Generate HW utilization details for time windows between consecutive raw records
    #
    DiffSystemMemory-1sW {
	metric.name = "DiffSystemMemory-1sW"
	metric.description = "Produces differential SystemMemoryRecord objects from raw SystemMemoryRecord objects at 1 second interval"
	input.queue.name = "RawSystemMemory-1sI"
	record.type = SystemMemory
	output.queue.name = "DiffSystemMemory-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 1000
    }
    DiffSystemCpu-1sW {
	metric.name = "DiffSystemCpu-1sW"
	metric.description = "Produces differential SystemCpuRecord objects from raw SystemCpuRecord objects at 1 second interval"
	input.queue.name = "RawSystemCpu-1sI"
	record.type = SystemCpu
	output.queue.name = "DiffSystemCpu-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemCpuRecordProcessor
	input.record.processor.method = merge 
	periodicity.ms = 1000
 	metric.enabled=true
    }
    DiffDiskstat-1sW {
	metric.name = "DiffDiskstat-1sW"
	metric.description = "Produces differential DiskstatRecord objects from raw DiskstatRecord objects at 1 second interval"
	input.queue.name = "RawDiskstat-1sI"
	record.type = Diskstat
	output.queue.name = "DiffDiskstat-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "device_name"
	input.record.processor.name = DiskstatRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 1000
    }
    DiffNetworkInterface-1sW {
	metric.name = "DiffNetworkInterface-1sW"
	metric.description = "Produces differential NetworkInterfaceRecord objects from raw NetworkInterfaceRecord objects at 1 second interval"
	input.queue.name = "RawNetworkInterface-1sI"
	record.type = NetworkInterface
	output.queue.name = "DiffNetworkInterface-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "name"
	input.record.processor.name = NetworkInterfaceRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 1000
    }
    DiffLoadAverage-1sW {
	metric.name = "DiffLoadAverage-1sW"
	metric.description = "Produces differential LoadAverageRecord objects from raw LoadAverageRecord objects at 1 second interval"
	input.queue.name = "RawLoadAverage-1sI"
	record.type = LoadAverage
	output.queue.name = "DiffLoadAverage-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = LoadAverageRecordProcessor
	input.record.processor.method = merge 
	metric.enabled=true
	periodicity.ms = 1000
    }

    #
    # Select only SystemCpuRecords where the idle time is less than 10%
    #
    HighSystemCpu-1sW {
	metric.name = "HighSystemCpu-1sW"
	metric.description = "Select only SystemCpuRecords where the idle time is less than 10%"
	input.queue.name = "DiffSystemCpu-1sW"
	record.type = SystemCpu
	output.queue.name = "HighSystemCpu-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemCpuRecordProcessor
	input.record.processor.method = isBelow
	threshold.key = "%idle"
	threshold.value = 0.1
	metric.enabled=true
	periodicity.ms = 1000
    }
    HighSystemCpu-Window {
	metric.name = "HighSystemCpu-Window"
	metric.description = "Windows of time where idle CPU is less than 10%"
	input.queue.name = "HighSystemCpu-1sW"
	record.type = NetworkInterface
	output.queue.name = "HighSystemCpu-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemCpuRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }	
    HighSystemCpuEx2-1sW {
	metric.name = "HighSystemCpuEx2-1sW"
	metric.description = "Select only SystemCpuRecords where the idle time is less than 10%"
	input.queue.name = "DiffSystemCpu-1sW"
	record.type = SystemCpu
	output.queue.name = "HighSystemCpuEx2-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemCpuRecordProcessor
	input.record.processor.method = isBelow
	threshold.key = "%idleEx2"
	threshold.value = 0.1
	metric.enabled=true
	periodicity.ms = 1000
    }
    HighSystemCpuEx2-Window {
	metric.name = "HighSystemCpuEx2-Window"
	metric.description = "Windows of time where idle CPU is less than 10%"
	input.queue.name = "HighSystemCpuEx2-1sW"
	record.type = NetworkInterface
	output.queue.name = "HighSystemCpuEx2-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemCpuRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }	

    #
    # Select only SystemMemoryRecords where any of the following conditions are present:
    # 1. <2% free memory
    # 2. <5% freeAndFreeableMemory
    # 2. >0 pages swapped in or out
    # 3. >0 instances of alloc stall
    #
    LowFreeSystemMemory-1sW {
	metric.name = "LowFreeSystemMemory-1sW"
	metric.description = "Select only SystemMemoryRecords where free memory is less than 2% of total"
	input.queue.name = "DiffSystemMemory-1sW"
	record.type = SystemMemory
	output.queue.name = "LowFreeSystemMemory-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = isBelow
	threshold.key = "%free"
	threshold.value = 0.02
	metric.enabled=true
	periodicity.ms = 1000
    }
    LowFreeSystemMemory-Window {
	metric.name = "LowFreeSystemMemory-Window"
	metric.description = "Windows of time where free system memory is less than 2% of total"
	input.queue.name = "LowFreeSystemMemory-1sW"
	record.type = NetworkInterface
	output.queue.name = "LowFreeSystemMemory-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }	
#    LowFreeAndFreeableSystemMemory-1sW {
#	metric.name = "LowFreeAndFreeableSystemMemory-1sW"
#	metric.description = "Select only SystemMemoryRecords where freeAndFreeable memory is less than 5% of total"
#	input.queue.name = "DiffSystemMemory-1sW"
#	record.type = SystemMemory
#	output.queue.name = "LowFreeAndFreeableSystemMemory-1sW"
#	output.queue.capacity.records = 0
#	output.queue.capacity.seconds = 0
#	output.queue.max.producers = 1
#	input.record.selector = sequential
#	input.record.processor.name = SystemMemoryRecordProcessor
#	input.record.processor.method = isBelow
#	threshold.key = "%freeAndFreeable"
#	threshold.value = 0.05
#	metric.enabled=true
#	periodicity.ms = 1000
#    }
#    LowFreeAndFreeableSystemMemory-Window {
#	metric.name = "LowFreeAndFreeableSystemMemory-Window"
#	metric.description = "Windows of time where freeAndFreeable system memory is less than 5% of total"
#	input.queue.name = "LowFreeAndFreeableSystemMemory-1sW"
#	record.type = NetworkInterface
#	output.queue.name = "LowFreeAndFreeableSystemMemory-Window"
#	output.queue.capacity.records = 0
#	output.queue.capacity.seconds = 0
#	output.queue.max.producers = 1
#	input.record.selector = sequential
#	input.record.processor.name = SystemMemoryRecordProcessor
#	input.record.processor.method = mergeChronologicallyConsecutive
#	metric.enabled=true
#	periodicity.ms = 1000
#    }	
    PagesSwappedIn-1sW {
	metric.name = "PagesSwappedIn-1sW"
	metric.description = "Select only SystemMemoryRecords where pswpin is > 0"
	input.queue.name = "DiffSystemMemory-1sW"
	record.type = SystemMemory
	output.queue.name = "PagesSwappedIn-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = isNotEqual
	threshold.key = "pswpin"
	threshold.value = 0
	metric.enabled=true
	periodicity.ms = 1000
    }
    PagesSwappedIn-Window {
	metric.name = "PagesSwappedIn-Window"
	metric.description = "Windows of time where pages were swapped in"
	input.queue.name = "PagesSwappedIn-1sW"
	record.type = NetworkInterface
	output.queue.name = "PagesSwappedIn-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }	
    PagesSwappedOut-1sW {
	metric.name = "PagesSwappedOut-1sW"
	metric.description = "Select only SystemMemoryRecords where pswpout is > 0"
	input.queue.name = "DiffSystemMemory-1sW"
	record.type = SystemMemory
	output.queue.name = "PagesSwappedOut-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = isNotEqual
	threshold.key = "pswpout"
	threshold.value = 0
	periodicity.ms = 1000
	metric.enabled=true
    }
    PagesSwappedOut-Window {
	metric.name = "PagesSwappedOut-Window"
	metric.description = "Windows of time where pages were swapped out"
	input.queue.name = "PagesSwappedOut-1sW"
	record.type = NetworkInterface
	output.queue.name = "PagesSwappedOut-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }	
     Allocstall-1sW {
	metric.name = "Allocstall-1sW"
	metric.description = "Select only SystemMemoryRecords where allocstall is > 0"
	input.queue.name = "DiffSystemMemory-1sW"
	record.type = SystemMemory
	output.queue.name = "Allocstall-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = isNotEqual
	threshold.key = "allocstall"
	threshold.value = 0
	periodicity.ms = 1000
	metric.enabled=true
    }
    Allocstall-Window {
	metric.name = "Allocstall-Window"
	metric.description = "Windows of time where pages were allocstalls occurred"
	input.queue.name = "Allocstall-1sW"
	record.type = NetworkInterface
	output.queue.name = "Allocstall-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemMemoryRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }	

    #
    # Select only DiskstatRecords where any of the following conditions are present:
    # 1. >90% device utilization (i.e. device was executing IO calls for >0.9s out of 1s window
    # 2. >20ms average service time (i.e. time from when kernel issued IO call to device to response)
    #
    # Use of 40ms as a threshold is just an example.  Different types of drives merit different
    # thresholds.  SSD != HD.  10K RPM HD != 7.2K RPM HD.  In any case, at 40ms average service time,
    # the drive will be 100% utilized by 25 operations per second which is low.  40ms is unlikely to 
    # set off any false alarms, even when running the worst case scenario IO load where every op
    # requires a full stroke seek.
    #
    HighDeviceUtilization-1sW{
	metric.name = "HighDeviceUtilization-1sW"
	metric.description = "Select only DiskstatRecords where device is utilized >90% of time"
	input.queue.name = "DiffDiskstat-1sW"
	record.type = Diskstat
	output.queue.name = "HighDeviceUtilization-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = DiskstatRecordProcessor
	input.record.processor.method = isAbove
	threshold.key = "utilizationPct"
	threshold.value = 0.9
	metric.enabled=true
	periodicity.ms = 1000
    }
    HighDeviceUtilizationAndHighServiceTime-1sW{
	metric.name = "HighDeviceUtilizationAndHighServiceTime-1sW"
	metric.description = "Select only DiskstatRecords where average service time for IO calls is >40ms and device is utilized >90% of time"
	input.queue.name = "HighDeviceUtilization-1sW"
	record.type = Diskstat
	output.queue.name = "HighDeviceUtilizationAndHighServiceTime-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = DiskstatRecordProcessor
	input.record.processor.method = isAbove
	threshold.key = "averageServiceTime"
	threshold.value = 40
	metric.enabled=true
	periodicity.ms = 1000
    }
    HighDeviceUtilization-Window {
	metric.name = "HighDeviceUtilization-Window"
	metric.description = "Windows of time where a device utilization was >90%"
	input.queue.name = "HighDeviceUtilization-1sW"
	record.type = NetworkInterface
	output.queue.name = "HighDeviceUtilization-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "device_name"
	input.record.processor.name = DiskstatRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }	
    HighDeviceUtilizationAndHighServiceTime-Window {
	metric.name = "HighDeviceUtilizationAndHighServiceTime-Window"
	metric.description = "Windows of time where a device utilization was >90% and average service time >40ms"
	input.queue.name = "HighDeviceUtilizationAndHighServiceTime-1sW"
	record.type = NetworkInterface
	output.queue.name = "HighDeviceUtilizationAndHighServiceTime-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "device_name"
	input.record.processor.name = DiskstatRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }	
    HighDeviceServiceTime-1sW {
	metric.name = "HighDeviceServiceTime-1sW"
	metric.description = "Select only DiskstatRecords where average service time for IO calls is >40ms"
	input.queue.name = "DiffDiskstat-1sW"
	record.type = Diskstat
	output.queue.name = "HighDeviceServiceTime-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = DiskstatRecordProcessor
	input.record.processor.method = isAbove
	threshold.key = "averageServiceTime"
	threshold.value = 40
	metric.enabled=true
	periodicity.ms = 1000
    }
    HighDeviceServiceTime-Window {
	metric.name = "HighDeviceServiceTime-Window"
	metric.description = "Windows of time where average service time for IO calls is >40ms"
	input.queue.name = "HighDeviceServiceTime-1sW"
	record.type = NetworkInterface
	output.queue.name = "HighDeviceServiceTime-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "device_name"
	input.record.processor.name = DiskstatRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }	

    #
    # Select only NetworkInterfaceRecords where any of the following conditions are present:
    #
    # 1. >90% RX or TX utilization 
    # 2. duplex state for interface is set to half
    # 3. no carrier detected for interface
    # 4. <1000Mbps interface speed
    # 5. <1000 interface TX queue length
    # 6. >0 collisions, drops or errors
    #
    # Merge consecutive selected records into a single record.
    #
    HighNetworkInterfaceRXUtilization-1sW {
	metric.name = "HighNetworkInterfaceRXUtilization-1sW"
	metric.description = "Select only NetworkInterfaceRecords where RX utilization is >90%"
	input.queue.name = "DiffNetworkInterface-1sW"
	record.type = NetworkInterface
	output.queue.name = "NetworkInterfaceEvents-1sW-HighRX"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = NetworkInterfaceRecordProcessor
	input.record.processor.method = isAbove
	threshold.key = "rxUtilizationPct"
	threshold.value = 0.9
	metric.enabled=true
	periodicity.ms = 1000
    }
    HighNetworkInterfaceRXUtilization-Window {
	metric.name = "HighNetworkInterfaceRXUtilization-Window"
	metric.description = "Windows of time where RX utilization is >90% for a network interface"
	input.queue.name = "NetworkInterfaceEvents-1sW-HighRX"
	record.type = NetworkInterface
	output.queue.name = "HighNetworkInterfaceRXUtilization-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "name"
	input.record.processor.name = NetworkInterfaceRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }	
    HighNetworkInterfaceTXUtilization-1sW {
	metric.name = "HighNetworkInterfaceTXUtilization-1sW"
	metric.description = "Select only NetworkInterfaceRecords where RX utilization is >90%"
	input.queue.name = "DiffNetworkInterface-1sW"
	record.type = NetworkInterface
	output.queue.name = "NetworkInterfaceEvents-1sW-HighTX"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = NetworkInterfaceRecordProcessor
	input.record.processor.method = isAbove
	threshold.key = "txUtilizationPct"
	threshold.value = 0.9
	metric.enabled=true
	periodicity.ms = 1000
    }
    HighNetworkInterfaceTXUtilization-Window {
	metric.name = "HighNetworkInterfaceTXUtilization-Window"
	metric.description = "Windows of time where TX utilization is >90% for a network interface"
	input.queue.name = "NetworkInterfaceEvents-1sW-HighTX"
	record.type = NetworkInterface
	output.queue.name = "HighNetworkInterfaceTXUtilization-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "name"
	input.record.processor.name = NetworkInterfaceRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }
    NetworkInterfaceHasProblems-1sW {
	metric.name = "NetworkInterfaceHasProblems-1sW"
	metric.description = "Selects only NetworkInterfaceRecords where one of various problem conditions is present"
	input.queue.name = "DiffNetworkInterface-1sW"
	record.type = NetworkInterface
	output.queue.name = "NetworkInterfaceEvents-1sW-Problems"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 3
	input.record.selector = sequential
	input.record.processor.name = NetworkInterfaceRecordProcessor
	input.record.processor.method = isEqual
	threshold.key = "hasProblems"
	threshold.value = true
	metric.enabled=true
	periodicity.ms = 1000
    }
    NetworkInterfaceHasProblems-Window {
	metric.name = "NetworkInterfaceHasProblems-Window"
	metric.description = "Windows of time where network interface has problems"
	input.queue.name = "NetworkInterfaceEvents-1sW-Problems"
	record.type = NetworkInterface
	output.queue.name = "NetworkInterfaceHasProblems-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequentialWithQualifier
	selector.qualifier.key = "name"
	input.record.processor.name = NetworkInterfaceRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }

    #
    # Select only LoadAverageRecords where 1-minute load average is >1.25 * # of cores
    #
    # This condition basically indicates that to use the CPU for 60 seconds, a
    # a thread is generally having to wait for 15 seconds.  For example, a thread
    # processes requests and sends back responses, typically taking 4ms seconds per
    # request when load average is <=1.  When load average is 1.25, the thread is
    # likely to take about 5ms.  Use of 1.25 as a threshold in this case is simply
    # for example.  You should customize this value based upon your requirements
    # for responsiveness of the system.  I.e. if normal response time for a request
    # is 5ms when CPU is not bottlenecked, and you can tolerate a response time up
    # to 10ms, then using 2 as the threshold value for 1 minute load average is 
    # reasonable.
    #
    High1MinLoadAverage-1sW {
	metric.name = "High1MinLoadAverage-1sW"
	metric.description = "Selects only LoadAverageRecords where 1 minute load average is >1.25 per core"
	input.queue.name = "DiffLoadAverage-1sW"
	record.type = LoadAverage
	output.queue.name = "High1MinLoadAverage-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	related.output.queue.record.capacity = 0
	related.output.queue.second.capacity = 0
	related.output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = LoadAverageRecordProcessor
	input.record.processor.method = isAbove
	threshold.key = "loadAverage1Min"
	threshold.value = 40
	related.selector.enabled = true
	selector.qualifier.key = "duration"
	selector.qualifier.value = 1000
	selector.related.input.queue.name = "DiffSystemCpu-1sW"
	selector.related.output.queue.name = "DiffSystemCpuDuringHigh1MinLoadAverage-1sW"
	selector.related.name = BasicRelatedRecordSelector
	selector.related.method = timeBasedWindow
	metric.enabled=true
	periodicity.ms = 1000
    }
    HighSystemCpuDuringHigh1MinLoadAverage-1sW {
	metric.name = "HighSystemCpuDuringHigh1MinLoadAverage-1sW"
	metric.description = "Select only SystemCpuRecords where the idle time is less than 15% while 1 min load average is >1.25 per core"
	input.queue.name = "DiffSystemCpuDuringHigh1MinLoadAverage-1sW"
	record.type = SystemCpu
	output.queue.name = "HighSystemCpuDuringHigh1MinLoadAverage-1sW"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemCpuRecordProcessor
	input.record.processor.method = isBelow
	threshold.key = "%idle"
	threshold.value = 0.15
	metric.enabled=true
	periodicity.ms = 1000
    }
    High1MinLoadAverage-Window {
	metric.name = "High1MinLoadAverage-Window"
	metric.description = "Windows of time where load average is high"
	input.queue.name = "High1MinLoadAverage-1sW"
	record.type = LoadAverage
	output.queue.name = "High1MinLoadAverage-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = LoadAverageRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }
    HighSystemCpuDuringHigh1MinLoadAverage-Window {
	metric.name = "HighSystemCpuDuringHigh1MinLoadAverage-Window"
	metric.description = "Windows of time where load average is high and idle is low"
	input.queue.name = "HighSystemCpuDuringHigh1MinLoadAverage-1sW"
	record.type = LoadAverage
	output.queue.name = "HighSystemCpuDuringHigh1MinLoadAverage-Window"
	output.queue.capacity.records = 0
	output.queue.capacity.seconds = 0
	output.queue.max.producers = 1
	input.record.selector = sequential
	input.record.processor.name = SystemCpuRecordProcessor
	input.record.processor.method = mergeChronologicallyConsecutive
	metric.enabled=true
	periodicity.ms = 1000
    }

    #
    # Persist output to files on local file system
    #
    PersistHighNetworkInterfaceRXUtilization-Window {
	metric.name = "PersistHighNetworkInterfaceRXUtilization-Window"
	metric.description = "Persist records from the HighNetworkInterfaceRXUtilization-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "NetworkInterface"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "HighNetworkInterfaceRXUtilization-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
    PersistHighNetworkInterfaceTXUtilization-Window {
	metric.name = "PersistHighNetworkInterfaceTXUtilization-Window"
	metric.description = "Persist records from the HighNetworkInterfaceTXUtilization-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "NetworkInterface"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "HighNetworkInterfaceTXUtilization-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
    PersistNetworkInterfaceHasProblems-Window {
	metric.name = "PersistNetworkInterfaceHasProblems-Window"
	metric.description = "Persist records from the NetworkInterfaceHasProblems-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "NetworkInterface"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "NetworkInterfaceHasProblems-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
    PersistHighSystemCpu-Window {
	metric.name = "PersistHighSystemCpu-Window"
	metric.description = "Persist records from the HighSystemCpu-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "SystemCpu"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "HighSystemCpu-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
    PersistHighSystemCpuEx2-Window {
	metric.name = "PersistHighSystemCpuEx2-Window"
	metric.description = "Persist records from the HighSystemCpuEx2-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "SystemCpu"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "HighSystemCpuEx2-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
    PersistLowFreeSystemMemory-Window {
	metric.name = "PersistLowFreeSystemMemory-Window"
	metric.description = "Persist records from the LowFreeSystemMemory-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "SystemMemory"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "LowFreeSystemMemory-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
#    PersistLowFreeAndFreeableSystemMemory-Window {
#	metric.name = "PersistLowFreeAndFreeableSystemMemory-Window"
#	metric.description = "Persist records from the LowFreeSystemMemory-Window queue to a local file  at /opt/mapr/distiller/output/"
#	record.type = "SystemMemory"
#	metric.enabled = true
#	periodicity.ms = 1000
#	input.queue.name = "LowFreeAndFreeableSystemMemory-Window"
#	input.record.selector = persist
#	persistor.name = "LocalFileSystem"
#	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
#	lfsp.max.output.dir.size = 1073741824
#	lfsp.write.batch.size = 4096
#	lfsp.flush.frequency = 1000
#	lfsp.records.per.file = 99999999
#    }
    PersistPagesSwappedIn-Window {
	metric.name = "PersistPagesSwappedIn-Window"
	metric.description = "Persist records from the PagesSwappedIn-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "SystemMemory"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "PagesSwappedIn-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
    PersistPagesSwappedOut-Window {
	metric.name = "PersistPagesSwappedOut-Window"
	metric.description = "Persist records from the PagesSwappedOut-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "SystemMemory"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "PagesSwappedOut-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
    PersistAllocstall-Window {
	metric.name = "PersistAllocstall-Window"
	metric.description = "Persist records from the Allocstall-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "SystemMemory"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "Allocstall-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
    PersistHighDeviceUtilization-Window {
	metric.name = "PersistHighDeviceUtilization-Window"
	metric.description = "Persist records from the HighDeviceUtilization-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "Diskstat"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "HighDeviceUtilization-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
    PersistHighDeviceUtilizationAndHighServiceTime-Window {
	metric.name = "PersistHighDeviceUtilizationAndHighServiceTime-Window"
	metric.description = "Persist records from the HighDeviceUtilizationAndHighServiceTime-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "Diskstat"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "HighDeviceUtilizationAndHighServiceTime-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
    PersistHighDeviceServiceTime-Window {
	metric.name = "PersistHighDeviceServiceTime-Window"
	metric.description = "Persist records from the HighDeviceServiceTime-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "Diskstat"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "HighDeviceServiceTime-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
    PersistHigh1MinLoadAverage-Window {
	metric.name = "PersistHigh1MinLoadAverage-Window"
	metric.description = "Persist records from the High1MinLoadAverage-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "LoadAverage"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "High1MinLoadAverage-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
    PersistHighSystemCpuDuringHigh1MinLoadAverage-Window {
	metric.name = "PersistHighSystemCpuDuringHigh1MinLoadAverage-Window"
	metric.description = "Persist records from the HighSystemCpuDuringHigh1MinLoadAverage-Window queue to a local file  at /opt/mapr/distiller/output/"
	record.type = "LoadAverage"
	metric.enabled = true
	periodicity.ms = 1000
	input.queue.name = "HighSystemCpuDuringHigh1MinLoadAverage-Window"
	input.record.selector = persist
	persistor.name = "LocalFileSystem"
	lfsp.output.dir = "/root/rp/hwBottleneckOutput"
	lfsp.max.output.dir.size = 1073741824
	lfsp.write.batch.size = 4096
	lfsp.flush.frequency = 1000
	lfsp.records.per.file = 99999999
    }
}
